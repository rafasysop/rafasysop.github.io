{"version":3,"sources":["config/client-graphql.js","assets/loading.svg","components/Card/index.js","components/Header/index.js","pages/Home.js","pages/CountryDetail.js","routes/routes.js","App.js","index.js"],"names":["GET_COUNTRY","gql","countries","client","ApolloClient","uri","cache","InMemoryCache","Card","useQuery","data","console","log","loading","useState","filter","setFilter","className","src","loadingIMG","alt","name","onChange","target","value","placeholder","Country","item","toLowerCase","includes","toLocaleLowerCase","map","pais","flag","svgFile","capital","to","numericCode","Header","props","title","subtitle","Home","CountryDetail","id","useParams","index","setIndex","edit","setEdit","nameState","setNameState","capitalState","setCapitalState","areaState","setAreaState","populationState","setPopulationState","domainState","setDomainState","error","newIndex","findIndex","undefined","area","population","topLevelDomains","style","cursor","onClick","colSpan","e","type","newCountry","i","writeQuery","query","saveInfo","Routes","path","component","exact","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d805c38.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache, gql } from '@apollo/client'\n\nexport const GET_COUNTRY = gql`\nquery GetCOUNTRYCache {\n  Country @client\n}\n`;\n\nexport const countries =  gql`\nquery GetCOUNTRY {\n  Country {\n    name\n    area\n    population\n    capital\n    numericCode\n    flag {\n      svgFile\n    }\n    topLevelDomains {\n      name\n    }\n  }\n}`;\n\nexport const client = new ApolloClient({\n  uri: 'https://countries-274616.ew.r.appspot.com/',\n  cache: new InMemoryCache(),\n})\n","export default __webpack_public_path__ + \"static/media/loading.9e6d858a.svg\";","import React, { useState } from 'react'\nimport './Card.css';\nimport loadingIMG from '../../assets/loading.svg';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { GET_COUNTRY, countries } from '../../config/client-graphql';\n\nfunction Card() {\n  const { data: cache, client } = useQuery(GET_COUNTRY);\n  console.log('Este é o Cache', cache);\n  console.log('Este é o Client', client);\n \n  // const countryLocal = JSON.parse(localStorage.getItem('Country'));\n  let { loading, data } = useQuery(countries);\n  if (cache) {\n    data = cache;\n  } \n  const [filter, setFilter] = useState('');\n  if (loading) return (\n    <div className=\"load\">\n      <img src={ loadingIMG } alt=\"Loading\"/>\n    </div>);\n  // localStorage.setItem('Country', JSON.stringify(data))\n  return (\n    <>\n      <div className='search-container' >\n        <input\n          name='search'\n          className=\"search\"\n          onChange={({ target }) => setFilter(target.value)}\n          placeholder='Search Country'\n        />\n      </div>\n      <div className='card-container'>\n        {data.Country?.filter(item => (item.name).toLowerCase()\n            .includes(filter.toLocaleLowerCase())).map((pais) => (\n          <div key={pais.numericCode} className='card'>\n            <img className='flag-card' src={pais.flag.svgFile} alt={pais.name} />\n            <h3>{pais.name}</h3>\n              Capital: {pais.capital}\n            <Link\n              to={`/country/${pais.numericCode}`}\n              className='more-datails'\n            > \n              + Details\n            </Link>\n          </div>\n        ))}\n      </div>\n    </>\n  )\n}\n\nexport default Card;\n","import React from 'react'\nimport './Header.css';\nimport PropTypes from 'prop-types';\n\nfunction Header(props) {\n  const { title, subtitle, flag } = props\n  return (\n    <header>\n      {flag \n        ? <img src={ flag } className='header-flag' alt={ title }/> \n        : <div className=\"spacer\"></div>  \n      }\n      <div className=\"text-title\">\n        <h1>{ title }</h1>\n        <h2>{ subtitle }</h2>\n      </div>\n      <div className=\"spacer\">\n      </div>\n    </header>\n  )\n}\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  subtitle: PropTypes.string.isRequired,\n  flag: PropTypes.string\n}\n\nexport default Header\n","import React from 'react'\nimport Card from '../components/Card'\nimport Header from '../components/Header'\n\nfunction Home() {\n  return (\n    <>\n      <Header title='Country List' subtitle='' />\n      <Card />\n    </>\n  )\n}\n\nexport default Home\n","import React, { useState } from 'react'\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { GET_COUNTRY } from '../config/client-graphql'\n\nimport loadingIMG from '../assets/loading.svg';\nimport Header from '../components/Header';\nimport { TiArrowBack, TiEdit } from \"react-icons/ti\";\n\nfunction CountryDetail(props) {\n  \n  const { id } = useParams();\n  const [index, setIndex] = useState();\n  const [edit, setEdit] = useState(false);\n  const [nameState, setNameState] = useState();\n  const [capitalState, setCapitalState] = useState();\n  const [areaState, setAreaState] = useState();\n  const [populationState, setPopulationState] = useState();\n  const [domainState, setDomainState] = useState();\n\n\n  const { loading, error, data, client } = useQuery(GET_COUNTRY)\n  \n  const saveInfo = () => {\n      const newCountry = { Country: data.Country.map((item, i) => {\n        if (i === index) {\n          return { \n            ...item,\n            name : nameState,\n            capital: capitalState,\n            area: areaState,\n            population: populationState,\n            topLevelDomains: [ { name: domainState } ]\n          };\n\n        }\n        return item;\n      })}\n      client.writeQuery({\n        query: GET_COUNTRY,\n        data: { ...newCountry },\n      })\n        setEdit(false);\n      }\n\n  if (loading) return (\n    <div className=\"load\">\n      <img src={ loadingIMG } alt=\"Loading\"/>\n    </div>);\n\n  if (error) return <p>Error :(</p>;\n\n  if (data.Country){\n    const newIndex = data.Country.findIndex(item => item.numericCode === id);\n    if (index === undefined) {\n      setIndex(newIndex)\n    }\n\n    let { \n      name,\n      flag,\n      capital,\n      area,\n      population,\n      topLevelDomains } = data.Country.filter(item => item.numericCode === id)[0];\n\n    if (nameState === undefined) {\n      setNameState(name)\n    }\n    if (capitalState === undefined) {\n      setCapitalState(capital)\n    }\n    if (areaState === undefined) {\n      setAreaState(area)\n    }\n    if (populationState === undefined) {\n      setPopulationState(population)\n    }\n    if (domainState === undefined) {\n      setDomainState(topLevelDomains[0].name)\n    }\n\n    return (\n      <>\n        <Header \n          title={ `Country: ${name}` }\n          subtitle={ `Capital: ${capital}` }\n          flag={ flag.svgFile }\n        />\n        {\n          edit ? (\n            <div className=\"details-container\">\n              <div className=\"details-icons\">\n                <TiArrowBack\n                  style={{ cursor: 'pointer' }}\n                  onClick={() => setEdit(false)}\n                />\n              </div>\n              <table>\n                <thead>\n                  <tr>\n                    <th colSpan='2'>Editar</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td className='cap-table'>Name:</td>\n                    <td className='value-table'>\n                      <input\n                        onChange={ (e) => { setNameState(e.target.value) } }\n                        type=\"text\"\n                        value={nameState}\n                      />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className='cap-table'>Capital:</td>\n                    <td className='value-table'>\n                      <input\n                        onChange={ (e) => { setCapitalState(e.target.value) } }\n                        type=\"text\"\n                        value={capitalState}\n                      />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className='cap-table'>Area:</td>\n                    <td className='value-table'>\n                      <input\n                        onChange={ (e) => { setAreaState(e.target.value) } }\n                        type=\"number\"\n                        value={areaState}\n                      />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className='cap-table'>Population:</td>\n                    <td className='value-table'>\n                      <input\n                        onChange={ (e) => { setPopulationState(e.target.value) } }\n                        type=\"number\"\n                        value={populationState}\n                      />\n                    </td>\n                  </tr>\n                  <tr>\n                    <td className='cap-table'>Top Level Domain:</td>\n                    <td className='value-table'>\n                      <input\n                        onChange={ (e) => { setDomainState(e.target.value) } }\n                        value={domainState}\n                      />\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <button type='button' onClick={() => saveInfo() }>Save Info</button>\n            </div>\n          )\n          : (\n           <div className='details-container'>\n              <div className=\"details-icons\">\n                <Link to='/'><TiArrowBack /></Link>\n                <TiEdit\n                  style={{ cursor: 'pointer' }}\n                  onClick={() => setEdit(true)}\n                />\n              </div>\n              <table>\n                <thead>\n                  <tr>\n                    <th colSpan='2'>Details</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td className='cap-table'>Area:</td>\n                    <td className='value-table'>{area}</td>\n                  </tr>\n                  <tr>\n                    <td className='cap-table'>Population:</td>\n                    <td className='value-table'>{population}</td>\n                  </tr>\n                  <tr>\n                    <td className='cap-table'>Top Level Domain:</td>\n                    <td className='value-table'>\n                      {topLevelDomains.map((item) => item.name)}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          )\n        }\n      </>\n    )\n  } \n}\n\nexport default CountryDetail;\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport Home from \"../pages/Home\";\nimport CountryDetail from \"../pages/CountryDetail\";\n\nfunction Routes() {\n  return (\n    <Router>\n      <Switch>\n      <Route path='/country/:id' component={ CountryDetail } />\n      <Route path='/' exact component={ Home } />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default Routes;\n","import React from 'react'\nimport './App.css';\n\nimport { client } from './config/client-graphql';\nimport { ApolloProvider } from '@apollo/client';\nimport Routes from './routes/routes';\n\nfunction App() {\n\n\n  return (\n    <ApolloProvider client={ client }>\n      <Routes />\n    </ApolloProvider>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('country')\n);\n\n"],"sourceRoot":""}